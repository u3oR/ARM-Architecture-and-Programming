
========================================================================

** ELF Header Information

    File Name: stm32-project\stm32-project.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: Not specified
    Flags: EF_ARM_ABI_FLOAT_SOFT (0x05000200)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 7 (build 960) Tool: armasm [4d35fa]
    Component: ARM Compiler 5.06 update 7 (build 960) Tool: armlink [4d3601]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 14

    Program header offset: 7892 (0x00001ed4)
    Section header offset: 7924 (0x00001ef4)

    Section header string table index: 13

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_R]
    Size : 112 bytes
    Virtual address: 0x08000000 (Alignment 4)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 112 bytes (alignment 4)
    Address: 0x08000000

    $d.realdata
    RESET
    __Vectors
        0x08000000:    00000000    ....    DCD    0
        0x08000004:    08000009    ....    DCD    134217737
		; 
		
    $t
    .text
    Reset_Handler
        0x08000008:    f8dfd004    ....    LDR      sp,[pc,#4] ; [0x8000010] = 0x200c0000
		;
		
        0x0800000c:    f000f808    ....    BL       user_main ; 0x8000020
		;
		
    $d
        0x08000010:    200c0000    ...     DCD    537657344
    $t
    i.delay
    delay
        0x08000014:    bf00        ..      NOP      
        ;
		
		0x08000016:    1e01        ..      SUBS     r1,r0,#0
        ;
		
		0x08000018:    f1a00001    ....    SUB      r0,r0,#1
        ;
		
		0x0800001c:    d1fb        ..      BNE      0x8000016 ; delay + 2
		;
		
        0x0800001e:    4770        pG      BX       lr
    i.user_main
    user_main
	;RCC->APB2ENR |= (1 << 2);
        0x08000020:    4810        .H      LDR      r0,[pc,#64] ; [0x8000064] = 0x40021000
        ; PC值永远超前当前执行的指令值一位
		; pc此时的值为 0x08000020 + 4
		; 0x08000020 + 4 + 64 = 0x8000064
		; 0x8000064中存储的值0x40021000是RCC_BASE的地址
		; 此指令将[0x08000020 + 4 + 64]地址中存储的值加载到r0寄存器中
		;
		; r0 = 0x40021000

		
		0x08000022:    6980        .i      LDR      r0,[r0,#0x18]
		; RCC结构体中, APB2ENR成员变量地址为基地址偏移 0x18
		; 在RCC结构体中, APB2ENR是其第7个uint32_t类型成员变量, 
		; 因此APB2ENR地址是基地址加上4*7=28=0x18
		; 此指令将[r0 + 0x18]地址中的值加载到r0
		; 此时r0中存放的是 RCC->APB2ENR 的值
		;
		; r0 = RCC->APB2ENR
		
        0x08000024:    f0400004    @...    ORR      r0,r0,#4
		; r0 |= (1 << 2)
		
        0x08000028:    490e        .I      LDR      r1,[pc,#56] ; [0x8000064] = 0x40021000
		; pc此时的值为 0x08000028 + 4 = 0x800002C
		; 0x08000020 + 4 + 56 = 0x8000064
		; 此指令将数据0x40021000加载到r1寄存器中
		;
		; r1 = 0x40021000
	
        0x0800002a:    6188        .a      STR      r0,[r1,#0x18]
		; 此指令将r0中的值存储到[r1 + 0x18]的地址中
		;
		; RCC->APB2ENR = r0
	
	
	;GPIOA->CRH |= (1 << 0);
        0x0800002c:    480e        .H      LDR      r0,[pc,#56] ; [0x8000068] = 0x40010804
        0x0800002e:    6800        .h      LDR      r0,[r0,#0]
        0x08000030:    f0400001    @...    ORR      r0,r0,#1
        0x08000034:    490c        .I      LDR      r1,[pc,#48] ; [0x8000068] = 0x40010804
        0x08000036:    6008        .`      STR      r0,[r1,#0]

	;while (1) 
	;{
        0x08000038:    e013        ..      B        0x8000062 ; user_main + 66
		; 跳转到0x08000062地址执行
		
        0x0800003a:    bf00        ..      NOP  
		; 空指令
	; 
        0x0800003c:    f44f7080    O..p    MOV      r0,#0x100
		; (1 << 8) = 0x100
		; 此指令将数据0x100存储到r0寄存器中
		
        0x08000040:    4909        .I      LDR      r1,[pc,#36] ; [0x8000068] = 0x40010804
		; 此指令将地址[0x40010804]中数据存储到r1寄存器中
		; 
		
        0x08000042:    310c        .1      ADDS     r1,r1,#0xc
        ;
		
		0x08000044:    6008        .`      STR      r0,[r1,#0]
        ;
		
		0x08000046:    bf00        ..      NOP      
		;
		
        
		
		0x08000048:    4808        .H      LDR      r0,[pc,#32] ; [0x800006c] = 0x7a120
        ; pc此时的值为 0x08000048 + 4 = 0x800004C
		; 0x08000048 + 4 + 32 = 0x800006c
		; 此指令将0x800006c地址中存储的值(500000)加载到r0寄存器中
		
		0x0800004a:    f7ffffe3    ....    BL       delay ; 0x8000014
		; 调用delay函数, 此时r0中的值 500000 会作为delay函数的参数
		
        0x0800004e:    bf00        ..      NOP
		; 空指令
		
        0x08000050:    f44f7080    O..p    MOV      r0,#0x100
        0x08000054:    4904        .I      LDR      r1,[pc,#16] ; [0x8000068] = 0x40010804
        0x08000056:    3110        .1      ADDS     r1,r1,#0x10
        0x08000058:    6008        .`      STR      r0,[r1,#0]
        0x0800005a:    bf00        ..      NOP  
		; 空指令
		
        0x0800005c:    4803        .H      LDR      r0,[pc,#12] ; [0x800006c] = 0x7a120 
		;
		
        0x0800005e:    f7ffffd9    ....    BL       delay ; 0x8000014
		;
		
        0x08000062:    e7ea        ..      B        0x800003a ; user_main + 26
		; 跳转到0x800003a地址执行
		
	;}
    $d
        0x08000064:    40021000    ...@    DCD    1073876992
        0x08000068:    40010804    ...@    DCD    1073809412
        0x0800006c:    0007a120     ...    DCD    500000

** Section #2 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #3 '.debug_frame' (SHT_PROGBITS)
    Size   : 156 bytes


** Section #4 '.debug_info' (SHT_PROGBITS)
    Size   : 1468 bytes


** Section #5 '.debug_line' (SHT_PROGBITS)
    Size   : 340 bytes


** Section #6 '.debug_loc' (SHT_PROGBITS)
    Size   : 60 bytes


** Section #7 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 2200 bytes


** Section #8 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 60 bytes


** Section #9 '.symtab' (SHT_SYMTAB)
    Size   : 272 bytes (alignment 4)
    String table #10 '.strtab'
    Last local symbol no. 11


** Section #10 '.strtab' (SHT_STRTAB)
    Size   : 284 bytes


** Section #11 '.note' (SHT_NOTE)
    Size   : 20 bytes (alignment 4)


** Section #12 '.comment' (SHT_PROGBITS)
    Size   : 1236 bytes


** Section #13 '.shstrtab' (SHT_STRTAB)
    Size   : 156 bytes


